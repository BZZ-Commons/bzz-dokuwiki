====== Kompetenzübersicht ======

====== Kompetenzmatrix - Modul 450 ======

Basis: Modulidentifikation Modul 450 Stand 19.10.2022, Version 1

===== Kompetenz-Matrix =====

^Kompetenzband ^HZ ^Grundlagen  ^Fortgeschritten  ^Erweitert  ^
|Testkonzept erstellen|2 | A1G: Kann die Komponenten eines Testumfelds identifizieren und beschreiben, einschliesslich der Test- und Entwicklungsumgebung, Hard- und Softwareanforderungen sowie Datenquellen und Testwerkzeugen. {{topic>.?m450-A1G&simplelist}}|A1F: Kann Unterschiede und Gemeinsamkeiten einer Test- und Produktivumgebung aufzeigen (DEV, TEST, INT/STAGE, PROD). {{topic>.?m450-A1F&simplelist}} |A1E: <html><br/></html>Kann die Anforderungen an ein Test- und Produktivumfeld definieren, inkl. Überwachung der Testaktivitäten und Fehlerbehebung. {{topic>.?m450-A1E&simplelist}} |
| |1 |A2G: Kann die Anforderungen einer Software verstehen und mögliche Schritte eines Testkonzeptes aufzählen. {{topic>.?m450-A2G&simplelist}} |A2F: Kann verschiedene Testarten in einem Konzept unterscheiden und erklären, welche für die Anforderungen des Projekts am besten geeignet sind. {{topic>.?m450-A2F&simplelist}} |A2E: Kann ein Testkonzept zusammenstellen in dem die für das Projekt relevantesten Testarten gewählt werden. {{topic>.?m450-A2E&simplelist}} |
|Tests definieren |3, 5, 6|B1G: Kann aufgrund der Strategie im Testkonzept geeignete Testmethoden und -werkzeuge vorschlagen. {{topic>.?m450-B1G&simplelist}}|B1F: Kann Testfälle formulieren, um jede Funktion oder jeden Aspekt der Software zu prüfen. {{topic>.?m450-B2F&simplelist}} |B1E: Kann Testszenarien definieren und legt damit fest, wie das System in einer bestimmten Reihenfolge oder Kombination von Funktionen und Prozessen reagieren sollte. {{topic>.?m450-B1E&simplelist}} |
|Tests automatisieren |5, 6 |C1G: Kann Kriterien für die Wahl der Testdaten und Mock-Objects aufzählen und kann den Begriff Testabdeckung erklären. {{topic>.?m450-C1G&simplelist}} |C1F: Kann Testfälle programmieren, die sowohl positive, negative Fälle, Grenzwerte und Spezialfälle abdecken. {{topic>.?m450-C1F&simplelist}} |C1E: Kann die Testdaten strukturieren, erstellt Mock-Objects, Hilfsmethoden und verwendet Features der Test-Frameworks. {{topic>.?m450-C1E&simplelist}} |
| |5, 7 |C2G: Kann den Unterschied zwischen Unit Testing und Integration Testing erklären und unterscheidet zwischen manuellen und automatisierten Tests. {{topic>.?m450-C2G&simplelist}} |C2F: Kann Unit Testing und Integration Testing im Rahmen eines Test Driven Development TDD anwenden (z.B. mit einem Testing-Framework). {{topic>.?m450-C2F&simplelist}} |C2E: Kann die CI/CD-Pipeline so konfigurieren, dass die Unit und Integration Tests automatisiert durchgeführt werden und die Test-Resultate nutzen, um den Deployment-Prozess zu steuern. {{topic>.?m450-C2E&simplelist}} |
|Schnittstellen testen|5, 8 |C3G: Kann grundlegende Tests von Schnittstellen durchführen. {{topic>.?m450-C3G&simplelist}} |C3F: Kann umfangreichere Tests von Schnittstellen durchführen {{topic>.?m450-C3F&simplelist}} |C3E: Kann komplexe Tests von Schnittstellen planen und durchführen. {{topic>.?m450-C3E&simplelist}} |
|Review durchführen |4 |D1G: Kann Clean Code Prinzipien erklären und diese anhand von Code-Beispielen aufzeigen (z.B. Single Responsibility Principle, DRY). {{topic>.?m450-D1G&simplelist}} |D1F: Kann in der Rolle eines Gutachters an einem Code Review teilnehmen und Mängel festhalten. {{topic>.?m450-D1F&simplelist}} |D1E: Kann Verbesserungen und Optimierungen auf Basis der durchs Review aufgezeigten Mängel vorschlagen. {{topic>.?m450-D1E&simplelist}} |
|Resultate auswerten |4 |D2G: Kann grundlegende Testergebnisse interpretieren  {{topic>.?m450-D2G&simplelist}} |D2F: Kann Zusammenhänge zwischen Testergebnissen erkennen {{topic>.?m450-D2F&simplelist}} |D2E: Kann fundierte Schlussfolgerungen aus den Testergebnissen ziehen. {{topic>.?m450-D2E&simplelist}} |
