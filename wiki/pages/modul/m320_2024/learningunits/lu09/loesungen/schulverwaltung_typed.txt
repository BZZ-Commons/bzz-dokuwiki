====== LU09.L01a - Schulverwaltung mit Types ======
<WRAP center round tip 60%>
In Python sind Typangaben bei der Definition von Variablen, Funktionen oder Methoden optional. 
Python ist eine dynamisch typisierte Sprache, das heisst, der Datentyp einer Variable wird zur Laufzeit automatisch ermittelt.

Du kannst die Datentypen angeben, um die Lesbarkeit zu verbessern und Fehler frühzeitig zu erkennen, aber der Interpreter erzwingt sie nicht.
Im Zusammenhang mit zweiseitigen Beziehungen führt die Verwendung von Datentypen aber zu einem zirkulären Import (SchoolClass importiert Student, Student importiert SchoolClass, welches Student importiert, ...).
</WRAP>

Dieses Codebeispiel zeigt eine Lösung, um die zirkulären Imports zu verhindern.

{{gh>https://github.com/templates-python/m320-lu09-a01-school/blob/typed/school_class.py}}

==== Erklärung ====
Mit der Bedingung ''if TYPE_CHECKING:'' verhindern wir, dass die Imports während der Ausführung des Programms stattfinden.
Lediglich während dem Überprüfen der Datentypen (//type checking//) werden die weiteren Dateien einbezogen.
Dadurch können wir Datentypen in zweiseitigen Beziehungen verwenden, ohne dass ein zirkulärer Import auftritt.

Damit dies funktioniert, müssen ''from _''''_future_''''_ import annotations'' und ''from typing import TYPE_CHECKING'' importiert werden.

Die vollständige Lösung finden Sie unter [[https://github.com/templates-python/m320-lu09-a01-school/tree/typed]].
