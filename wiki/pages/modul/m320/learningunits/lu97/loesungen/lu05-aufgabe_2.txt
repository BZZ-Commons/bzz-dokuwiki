==== LÃ¶sung 2 - UML mit Delegation ====

=== Beispiel Restaurant ===

Der Kellner delegiert das Zubereiten des MenÃ¼s an die KÃ¼che. Er verlÃ¤sst sich darauf, dass die Bestellung von der KÃ¼che ausgefÃ¼hrt wird und er benachrichtigt wird, wenn die Menus fertig sind. Alles Weitere spielt fÃ¼r ihn keine Rolle (d.h. wie die KÃ¼che intern organisiert ist mit einem KÃ¼chenchef, der die Menus auf seine KÃ¶che verteilt -> s.a. Abb. 3+4). Auch der Gast delegiert Ã¼brigens, nÃ¤mlich das Aufnehmen der Bestellung an den Kellner. Dieser nimmt die WÃ¼nsche der GÃ¤ste am Tisch entgegen und leitet sie weiter ðŸ˜‰

**Bewertung bezgl. IOSP**
^ Bsp. fÃ¼r reine Operation       ^ Bsp. fÃ¼r reine Integration         ^ Bsp. fÃ¼r Mix (sowohl Logik als auch Aufrufe) ^
| Kellner -> Bestellung erfassen | Gast -> bestellen                  | Kellner -> Bestellung aufnehmen              |
| Koch -> Menu zubereiten        | Kellner -> Bestellung weiterleiten | -                                            |

{{modul:m320:learningunits:lu97:loesungen:restaurant_class_simple.png?nolink&400|Abb. 1: Statischer Entwurf}}\\
Abb. 1: Statischer Entwurf

{{modul:m320:learningunits:lu97:loesungen:restaurant_sequence_simple.png?nolink&400|Abb. 2: Dynamischer Entwurf}}\\
Abb. 2: Dynamischer Entwurf

{{modul:m320:learningunits:lu97:loesungen:restaurant_class.png?nolink&400|Abb. 1: Statischer Entwurf detalliert}}\\
Abb. 3: Statischer Entwurf detalliert

{{modul:m320:learningunits:lu97:loesungen:restaurant_sequence.png?nolink&400|Abb. 2: Dynamischer Entwurf detalliert}}\\
Abb. 4: Dynamischer Entwurf detalliert